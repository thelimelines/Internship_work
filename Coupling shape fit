import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Load the data
data = pd.read_csv('mode_data_test.csv')

# Define the even symmetric Fourier series function
def even_symmetric_fourier_series(x, *coeffs):
    """Even symmetric Fourier series representation using only cosine terms of form cos(2n*pi*x/P)."""
    a0 = coeffs[0]
    result = a0
    for n in range(1, len(coeffs)):
        an = coeffs[n]
        result += an * np.cos(2 * n * np.pi * x / 180)
    return result

# Fit the even symmetric Fourier series for LP01, LP11, and LP21 using only data in the range [0, 90]
n_terms = 1  # Number of terms in the Fourier series (excluding a0)
modes_to_fit = [(0, 1), (1, 1), (2, 1)]
even_symmetric_fourier_coefficients = {}
for mode in modes_to_fit:
    mode_data = data[(data['Mode m'] == mode[0]) & (data['mode n'] == mode[1])]
    
    # Adjust the number of terms based on m
    n_terms_adjusted = mode[0] + 1
    
    # Filter data for x in [0, 90]
    mode_data = mode_data[mode_data['Polarization'] <= 90]
    
    x_data = mode_data['Polarization'].values
    y_data = np.nanmean([mode_data['Power1'].values, mode_data['Power2'].values], axis=0)
    
    # Fit the even symmetric Fourier series to the data with adjusted number of terms
    popt, _ = curve_fit(even_symmetric_fourier_series, x_data, y_data, p0=[1.0] + [0.0] * n_terms_adjusted)
    even_symmetric_fourier_coefficients[mode] = popt

# Plot the results
plt.figure(figsize=(15, 12))
for idx, mode in enumerate(modes_to_fit, 1):
    mode_data = data[(data['Mode m'] == mode[0]) & (data['mode n'] == mode[1])]
    
    x_data_combined = np.concatenate([mode_data['Polarization'].values, mode_data['Polarization'].values])
    y_data_combined = np.concatenate([mode_data['Power1'].values, mode_data['Power2'].values])
    
    # Filter NaN values
    valid_indices = ~np.isnan(y_data_combined)
    x_data_combined = x_data_combined[valid_indices]
    y_data_combined = y_data_combined[valid_indices]
    
    # Plot data
    plt.subplot(3, 1, idx)
    plt.scatter(x_data_combined, y_data_combined, label='Data', color='blue', s=10)
    
    # Plot adjusted even symmetric Fourier series representation
    x_vals = np.linspace(0, 180, 1000)
    y_vals = even_symmetric_fourier_series(x_vals, *even_symmetric_fourier_coefficients[mode])
    plt.plot(x_vals, y_vals, label='Fit', color='red')
    
    plt.title(f"Mode LP{mode[0]}{mode[1]} with {mode[0] + 1} terms")
    plt.xlabel('Polarization (degrees)')
    plt.ylabel('Power (W)')
    plt.legend()

plt.tight_layout()
plt.show()
